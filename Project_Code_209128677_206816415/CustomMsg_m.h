//
// Generated file, do not edit! Created by opp_msgtool 6.1 from CustomMsg.msg.
//

#ifndef __CUSTOMMSG_M_H
#define __CUSTOMMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class CustomMsg;
/**
 * Class generated from <tt>CustomMsg.msg:3</tt> by opp_msgtool.
 * <pre>
 * // CustomMsg.msg
 * message CustomMsg
 * {
 *     string srcAddr;       // Source MAC address
 *     string dstAddr;       // Destination MAC address
 *     simtime_t sentAt;     // When message was sent
 *     simtime_t receivedAt; // When message was received
 *     int msgId;            // Unique message identifier
 *     int msgSize;          // Message size in bytes
 *     int hopCount;         // Number of hops taken
 *     int seqNum;           // Sequence number for ordering
 * }
 * </pre>
 */
class CustomMsg : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string srcAddr;
    omnetpp::opp_string dstAddr;
    omnetpp::simtime_t sentAt = SIMTIME_ZERO;
    omnetpp::simtime_t receivedAt = SIMTIME_ZERO;
    int msgId = 0;
    int msgSize = 0;
    int hopCount = 0;
    int seqNum = 0;

  private:
    void copy(const CustomMsg& other);

  protected:
    bool operator==(const CustomMsg&) = delete;

  public:
    CustomMsg(const char *name=nullptr, short kind=0);
    CustomMsg(const CustomMsg& other);
    virtual ~CustomMsg();
    CustomMsg& operator=(const CustomMsg& other);
    virtual CustomMsg *dup() const override {return new CustomMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getSrcAddr() const;
    virtual void setSrcAddr(const char * srcAddr);

    virtual const char * getDstAddr() const;
    virtual void setDstAddr(const char * dstAddr);

    virtual omnetpp::simtime_t getSentAt() const;
    virtual void setSentAt(omnetpp::simtime_t sentAt);

    virtual omnetpp::simtime_t getReceivedAt() const;
    virtual void setReceivedAt(omnetpp::simtime_t receivedAt);

    virtual int getMsgId() const;
    virtual void setMsgId(int msgId);

    virtual int getMsgSize() const;
    virtual void setMsgSize(int msgSize);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual int getSeqNum() const;
    virtual void setSeqNum(int seqNum);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CustomMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CustomMsg& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline CustomMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<CustomMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __CUSTOMMSG_M_H

